#include <iostream>

#define MAXN 50001

using namespace std;

struct Node {
   int pref , suff , sum , maxx;
};

Node st[4 * MAXN];
int a[MAXN];
int n , m;

Node mergeNode(Node a , Node b) {
   Node res;
   res.sum = a.sum + b.sum;
   res.pref = max(a.pref , a.sum + b.pref);
   res.suff = max(b.suff , b.sum + a.suff);
   res.maxx = max(a.suff + b.pref , max(a.maxx , b.maxx));
   return res;
}

void build(int v , int l , int r) {
   if (l == r) {
       st[v].pref = st[v].suff = st[v].maxx = st[v].sum = a[l];
       return;
   }
   int mid = (l + r) / 2;
   build(2 * v , l , mid);
   build(2 * v + 1 , mid + 1 , r);
   st[v] = mergeNode(st[2*v],st[2*v+1]);
}

void update(int v , int l , int r , int idx , int val) {
   if (l == r && l == idx) {
       st[v].pref = st[v].suff = st[v].maxx = st[v].sum = val;
       return;
   }
   int mid = (l + r) / 2;
   if (idx <= mid)
       update(2 * v , l , mid , idx , val);
   else
       update(2 * v + 1 , mid + 1 , r , idx , val);
   st[v] = mergeNode(st[2*v],st[2*v+1]);
}

Node query(int v , int l , int r , int l1 , int r1) {
   if (l1 == l && r1 == r)
       return st[v];
   int mid = (l + r) / 2;
   if (r1 <= mid)
       return query(2 * v , l , mid , l1 , r1);
   if (l1 > mid)
       return query(2 * v + 1 , mid + 1, r , l1 , r1);
   return mergeNode(query(2 * v , l , mid , l1 , mid) , query(2 * v + 1 , mid + 1, r , mid + 1 , r1));
}

int main()
{
   cin >> n;
   for (int i = 1; i <= n; i++)
       cin >> a[i];
   build(1 , 1 , n);
   cin >> m;
   for (int q = 0; q < m; q++) {
       int c , x , y;
       cin >> c >> x >> y;
       if (c == 0) {
           update(1 , 1 , n , x , y);
       }
       else {
           Node ans = query(1 , 1 , n , x , y);
           cout << ans.maxx << endl;
       }
   }
   return 0;
}