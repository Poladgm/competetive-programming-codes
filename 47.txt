#include <iostream>
#include <queue>

using namespace std;

struct node{
   int val;
   int x;
   int y;
} start, finish , top;
int n,m,a,b,temp=1;

queue < pair < int , pair <int , int > > > s;
pair <int , int> node[102][102];
pair <int , int> dis[102][102];
pair <int , int> used[102][102];

int bfs (){
   while(!s.empty()){
       int i = s.front().second.first;
       int j = s.front().second.second;
       int val = s.front().first;

       s.pop();

       if( val == node[i][j].first ){
           if(i != 1 && used[i-1][j].second == 0){
               dis[i-1][j].second = dis[i][j].first + 1;
               used[i-1][j].second = 1;
               s.push( make_pair( node[i-1][j].second , make_pair( i-1 , j ) ) );
               //cout<<node[i-1][j].second<<" "<<i-1<<" "<<j<<" "<<dis[i-1][j].second<<" ikinci"<<endl;
           }

           if(j != 1 && used[i][j-1].second == 0){
               dis[i][j-1].second = dis[i][j].first + 1;
               used[i][j-1].second = 1;
               s.push( make_pair( node[i][j-1].second , make_pair( i , j-1 ) ) );
               //cout<<node[i][j-1].second<<" "<<i<<" "<<j-1<<" "<<dis[i][j-1].second<<"ikinci"<<endl;
           }

           if(used[i][j].second == 0){
               dis[i][j].second = dis[i][j].first + 1;
               used[i][j].second = 1;
               s.push( make_pair( node[i][j].second , make_pair( i , j ) ) );
               //cout<<node[i][j].second<<" "<<i<<" "<<j<<" "<<dis[i][j].second<<"ikinci"<<endl;
           }

       }
       else if( val == node[i][j].second ){
           if(i != n && used[i+1][j].first == 0){
               dis[i+1][j].first = dis[i][j].second + 1;
               used[i+1][j].first = 1;
               s.push( make_pair( node[i+1][j].first , make_pair( i+1 , j ) ) );
               //cout<<node[i+1][j].first<<" "<<i+1<<" "<<j<<" "<<dis[i+1][j].first<<"birinci"<<endl;
           }

           if(j != m && used[i][j+1].first == 0){
               dis[i][j+1].first = dis[i][j].second + 1;
               used[i][j+1].first = 1;
               s.push( make_pair( node[i][j+1].first , make_pair( i , j+1 ) ) );
               //cout<<node[i][j+1].first<<" "<<i<<" "<<j+1<<" "<<dis[i][j+1].first<<"birinci"<<endl;
           }

           if(used[i][j].first == 0){
               dis[i][j].first = dis[i][j].second + 1;
               used[i][j].first = 1;
               s.push( make_pair( node[i][j].first , make_pair( i , j ) ) );
               //cout<<node[i][j].first<<" "<<i<<" "<<j<<" "<<dis[i][j].first<<"birinci"<<endl;
           }
       }

       if(node[i][j].first == b){
           return dis[i][j].first;
       }
       else if(node[i][j].second == b){
           return dis[i][j].second;
       }
   }
}

int main()
{
   cin>>m>>n;
   cin>>a>>b;

   for(int i=1; i<=n; i++){
       for(int j=1; j<=m; j++){
           node[i][j].first = temp;
           node[i][j].second = temp+1;

           if(temp == a || temp+1 == a){
               start.x = i;
               start.y = j;
           }
           else if(temp == b || temp+1 == b){
               finish.x = i;
               finish.y = j;
           }

           temp+=2;
       }
   }

   start.val = a;

   if(node[start.x][start.y].first == a){
       used[start.x][start.y].first = 1;
   }
   else if(node[start.x][start.y].second == a){
       used[start.x][start.y].second = 1;
   }

   s.push(make_pair( start.val , make_pair( start.x , start.y) ) );
   cout<<bfs()<<endl;
   
   /*
   for(int i=1; i<=n; i++){
       for(int j=1; j<=m; j++){
           cout<<dis[i][j].first<<"/"<<dis[i][j].second<<" ";
       }
       cout<<endl;
   }
   */


   return 0;
}