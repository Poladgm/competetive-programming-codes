#include <iostream>
#include <queue>

using namespace std;

int n;
int start_i, start_j , finish_i , finish_j;
int used[52][52];
char a[52][52];
char ch;
pair <int , int> from[52][52];
int flag;

queue < pair <int , int> > q;

void bfs( int i , int j ){
   used[i][j] = 1;
   q.push( make_pair( i , j) );

   while(!q.empty()){
       pair <int , int > top =  q.front();
       q.pop();

       if( top.first == finish_i && top.second == finish_j){
           break;
       }
       i = top.first;  j = top.second;

       if( i-2 >= 1 && j-1 >= 1 && used[i-2][j-1] == 0 ){   // 2yuxari 1sol
           used[i-2][j-1] = 1;
           from[i-2][j-1] = make_pair(i,j);
           q.push( make_pair(i - 2, j-1) );
       }
       if( i-2 >= 1 && j+1 <= n && used[i-2][j+1] == 0){   // 2yuxari 1sag
           used[i-2][j+1] = 1;
           from[i-2][j+1] = make_pair(i,j);
           q.push( make_pair(i - 2, j+1) );
       }
       if( i+2 <= n && j-1 >= 1 && used[i+2][j-1] == 0){    // 2asagi 1sol
           used[i+2][j-1] = 1;
           from[i+2][j-1] = make_pair(i,j);
           q.push( make_pair(i + 2, j-1) );
       }
       if( i+2 <= n && j+1 <= n && used[i+2][j+1] == 0){   // 2asagi 1sag
           used[i+2][j+1] = 1;
           from[i+2][j+1] = make_pair(i,j);
           q.push( make_pair(i + 2, j+1) );
       }
       if( i-1 >= 1 && j-2 >= 1 && used[i-1][j-2] == 0){       // 1yuxari 2sol
           used[i-1][j-2]= 1;
           from[i-1][j-2] = make_pair(i,j);
           q.push( make_pair(i - 1, j-2) );
       }
       if( i-1 >= 1 && j+2 <= n && used[i-1][j+2] == 0){     // 1yuxari 2sag
           used[i-1][j+2]= 1;
           from[i-1][j+2] = make_pair(i,j);
           q.push( make_pair(i - 1, j+2) );
       }
       if( i+1 <= n && j+2 <= n && used[i+1][j+2] == 0){     // 1asagi 2sag
           used[i+1][j+2]= 1;
           from[i+1][j+2] = make_pair(i,j);
           q.push( make_pair(i + 1, j+2) );
       }
       if( i+1 <= n && j-2 >= 1 && used[i+1][j-2] == 0){    // 1asagi 2sol
           used[i+1][j-2]= 1;
           from[i+1][j-2] = make_pair(i,j);
           q.push( make_pair(i + 1, j-2) );
       }
   }

}


int main()
{
   cin>>n;

   for(int i=1; i<=n; i++){
       for(int j=1; j<=n; j++){
           from[i][j] = make_pair(i,j);

           cin>>ch;
           a[i][j] = ch;

           if(ch == '@' && flag == 0){
               start_i = i;
               start_j = j;
               flag = 1;
           }

           if(ch == '@' && flag == 1){
               finish_i = i;
               finish_j = j;
           }

           if(ch == '#'){
               used[i][j] = 1;
           }
       }
   }

   bfs(start_i , start_j);

   if(used[finish_i][finish_j] == 0){
       cout<<"Impossible"<<endl;
       return 0;
   }

   pair<int,int> mp;
   mp = make_pair(finish_i,finish_j);

   while(from[finish_i][finish_j] != mp ){
       a[mp.first][mp.second] = '@';
       mp = from[finish_i][finish_j];
       finish_i = mp.first;
       finish_j = mp.second;

   }

   for(int i=1; i<=n; i++){
       for(int j=1; j<=n; j++){
           cout<<a[i][j];
       }
       cout<<endl;
   }

   return 0;
}