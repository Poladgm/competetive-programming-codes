#include <iostream>
#include <queue>

using namespace std;

int n;
int start_i, start_j , finish_i , finish_j;
int a[22][22];
int used[22][22];
int dis[22][22];

queue < pair <int , int> > q;

void bfs( int i , int j ){
   used[i][j] = 1;
   q.push( make_pair( i , j) );
   dis[i][j] = 0;

   while(!q.empty()){
       pair <int , int > top =  q.front();
       q.pop();
       //cout<<"getdik: "<<top<<endl;

       if( top.first == finish_i && top.second == finish_j){
           break;
       }
       i = top.first; j = top.second;

       if( i-2 >= 1 && j-1 >= 1 && used[i-2][j-1] == 0 ){   // 2yuxari 1sol
           used[i-2][j-1] = 1;
           q.push( make_pair(i - 2, j-1) );
           dis[i-2][j-1] = dis[i][j] + 1;
       }
       if( i-2 >= 1 && j+1 <= n && used[i-2][j+1] == 0){   // 2yuxari 1sag
           used[i-2][j+1] = 1;
           q.push( make_pair(i - 2, j+1) );
           dis[i-2][j+1] = dis[i][j] + 1;
       }
       if( i+2 <= n && j-1 >= 1 && used[i+2][j-1] == 0){    // 2asagi 1sol
           used[i+2][j-1] = 1;
           q.push( make_pair(i + 2, j-1) );
           dis[i+2][j-1] = dis[i][j] + 1;
       }
       if( i+2 <= n && j+1 <= n && used[i+2][j+1] == 0){    // 2asagi 1sag
           used[i+2][j+1] = 1;
           q.push( make_pair(i + 2, j+1) );
           dis[i+2][j+1] = dis[i][j] + 1;
       }
       if( i-1 >= 1 && j-2 >= 1 && used[i-1][j-2] == 0){      // 1yuxari 2sol
           used[i-1][j-2]= 1;
           q.push( make_pair(i - 1, j-2) );
           dis[i-1][j-2] = dis[i][j] + 1;
       }
       if( i-1 >= 1 && j+2 <= n && used[i-1][j+2] == 0){    // 1yuxari 2sag
           used[i-1][j+2]= 1;
           q.push( make_pair(i - 1, j+2) );
           dis[i-1][j+2] = dis[i][j] + 1;
       }
       if( i+1 <= n && j+2 <= n && used[i+1][j+2] == 0){    // 1asagi 2sag
           used[i+1][j+2]= 1;
           q.push( make_pair(i + 1, j+2) );
           dis[i+1][j+2] = dis[i][j] + 1;
       }
       if( i+1 <= n && j-2 >= 1 && used[i+1][j-2] == 0){   // 1asagi 2sol
          used[i+1][j-2]= 1;
           q.push( make_pair(i + 1, j-2) );
           dis[i+1][j-2] = dis[i][j] + 1;
       }

   }

}


int main()
{
   cin>>n;
   cin>>start_i>>start_j>>finish_i>>finish_j;

   bfs(start_i , start_j);

   cout << dis[finish_i][finish_j] << endl;

   return 0;
}